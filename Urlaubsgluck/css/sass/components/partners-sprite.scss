/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$1-name: '1';
$1-x: 0px;
$1-y: 0px;
$1-offset-x: 0px;
$1-offset-y: 0px;
$1-width: 41px;
$1-height: 41px;
$1-total-width: 82px;
$1-total-height: 82px;
$1-image: 'partners-sprite.png';
$1: (0px, 0px, 0px, 0px, 41px, 41px, 82px, 82px, 'partners-sprite.png', '1', );
$2-name: '2';
$2-x: 41px;
$2-y: 0px;
$2-offset-x: -41px;
$2-offset-y: 0px;
$2-width: 41px;
$2-height: 41px;
$2-total-width: 82px;
$2-total-height: 82px;
$2-image: 'partners-sprite.png';
$2: (41px, 0px, -41px, 0px, 41px, 41px, 82px, 82px, 'partners-sprite.png', '2', );
$3-name: '3';
$3-x: 41px;
$3-y: 41px;
$3-offset-x: -41px;
$3-offset-y: -41px;
$3-width: 41px;
$3-height: 40px;
$3-total-width: 82px;
$3-total-height: 82px;
$3-image: 'partners-sprite.png';
$3: (41px, 41px, -41px, -41px, 41px, 40px, 82px, 82px, 'partners-sprite.png', '3', );
$4-name: '4';
$4-x: 0px;
$4-y: 41px;
$4-offset-x: 0px;
$4-offset-y: -41px;
$4-width: 41px;
$4-height: 41px;
$4-total-width: 82px;
$4-total-height: 82px;
$4-image: 'partners-sprite.png';
$4: (0px, 41px, 0px, -41px, 41px, 41px, 82px, 82px, 'partners-sprite.png', '4', );
$spritesheet-width: 82px;
$spritesheet-height: 82px;
$spritesheet-image: 'partners-sprite.png';
$spritesheet-sprites: ($1, $2, $3, $4, );
$spritesheet: (82px, 82px, 'partners-sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
